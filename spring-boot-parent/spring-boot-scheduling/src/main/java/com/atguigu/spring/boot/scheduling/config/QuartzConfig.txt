package com.ycxc.upload.config;

import com.ycxc.upload.config.properties.QuartzProperties;
import com.ycxc.upload.service.upload.ISyncToDcService;
import org.quartz.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.quartz.CronTriggerFactoryBean;
import org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean;
import org.springframework.scheduling.quartz.SchedulerFactoryBean;

@Configuration
public class QuartzConfig {

    private QuartzProperties quartzProperties;

    @Autowired
    public QuartzConfig(QuartzProperties quartzProperties) {
        this.quartzProperties = quartzProperties;
    }

    /**
     * 配置任务
     *
     * @param quartzTask QuartzTask为需要执行的任务
     * @return MethodInvokingJobDetailFactoryBean
     */
    @Bean(name = "uploadInspectDataJob")
    public MethodInvokingJobDetailFactoryBean uploadInspectDataDetailFactoryBean(@Autowired ISyncToDcService quartzTask) {
        MethodInvokingJobDetailFactoryBean jobDetail = new MethodInvokingJobDetailFactoryBean();
        // 是否并发执行
        jobDetail.setConcurrent(false);
        // 设置任务的名字
        jobDetail.setName("uploadInspectDataJob");
        // 设置任务的分组，在多任务的时候使用
        jobDetail.setGroup("uploadInspectDataJobGroup");
        // 需要执行的对象
        jobDetail.setTargetObject(quartzTask);
        /*
         * TODO  非常重要
         * 执行QuartzTask类中的需要执行方法
         */
        jobDetail.setTargetMethod("uploadInspect");
        return jobDetail;
    }

    /**
     * 配置任务
     *
     * @param quartzTask QuartzTask为需要执行的任务
     * @return MethodInvokingJobDetailFactoryBean
     */
    @Bean(name = "uploadFixAndInspectEntDataJob")
    public MethodInvokingJobDetailFactoryBean uploadFixAndInspectEntDataDetailFactoryBean(@Autowired ISyncToDcService quartzTask) {
        MethodInvokingJobDetailFactoryBean jobDetail = new MethodInvokingJobDetailFactoryBean();
        // 是否并发执行
        jobDetail.setConcurrent(false);
        // 设置任务的名字
        jobDetail.setName("uploadFixAndInspectEntDataJob");
        // 设置任务的分组，在多任务的时候使用
        jobDetail.setGroup("uploadFixAndInspectEntDataJobGroup");
        // 需要执行的对象
        jobDetail.setTargetObject(quartzTask);
        /*
         * TODO  非常重要
         * 执行QuartzTask类中的需要执行方法
         */
        jobDetail.setTargetMethod("uploadFixAndInspectEnt");
        return jobDetail;
    }

    /**
     * 配置任务
     *
     * @param quartzTask QuartzTask为需要执行的任务
     * @return MethodInvokingJobDetailFactoryBean
     */
    @Bean(name = "uploadTransportationEntDataJob")
    public MethodInvokingJobDetailFactoryBean uploadTransportationEntDataDetailFactoryBean(@Autowired ISyncToDcService quartzTask) {
        MethodInvokingJobDetailFactoryBean jobDetail = new MethodInvokingJobDetailFactoryBean();
        // 是否并发执行
        jobDetail.setConcurrent(false);
        // 设置任务的名字
        jobDetail.setName("uploadTransportationEntDataJob");
        // 设置任务的分组，在多任务的时候使用
        jobDetail.setGroup("uploadTransportationEntDataJobGroup");
        // 需要执行的对象
        jobDetail.setTargetObject(quartzTask);
        /*
         * TODO  非常重要
         * 执行QuartzTask类中的需要执行方法
         */
        jobDetail.setTargetMethod("uploadTransportationEnt");
        return jobDetail;
    }

    /**
     * 定时触发器
     *
     * @param reptilianJob 任务
     * @return CronTriggerFactoryBean
     */
    @Bean(name = "uploadInspectDataTrigger")
    public CronTriggerFactoryBean uploadInspectDataTriggerCronJobTrigger(@Qualifier("uploadInspectDataJob") JobDetail reptilianJob) {
        CronTriggerFactoryBean cronTriggerFactoryBean = new CronTriggerFactoryBean();
        cronTriggerFactoryBean.setJobDetail(reptilianJob);
        //cron表达式
        cronTriggerFactoryBean.setCronExpression(quartzProperties.getInspectDataCronExpression());
        cronTriggerFactoryBean.setName("uploadInspectDataJobTrigger");
        return cronTriggerFactoryBean;
    }

    /**
     * 定时触发器
     *
     * @param reptilianJob 任务
     * @return CronTriggerFactoryBean
     */
    @Bean(name = "uploadFixAndInspectEntDataTrigger")
    public CronTriggerFactoryBean uploadFixAndInspectEntDataCronJobTrigger(@Qualifier("uploadFixAndInspectEntDataJob") JobDetail reptilianJob) {
        CronTriggerFactoryBean cronTriggerFactoryBean = new CronTriggerFactoryBean();
        cronTriggerFactoryBean.setJobDetail(reptilianJob);
        //cron表达式
        cronTriggerFactoryBean.setCronExpression(quartzProperties.getFixAndInspectEntCronExpression());
        cronTriggerFactoryBean.setName("uploadFixAndInspectEntDataJobTrigger");
        return cronTriggerFactoryBean;
    }

    /**
     * 定时触发器
     *
     * @param reptilianJob 任务
     * @return CronTriggerFactoryBean
     */
    @Bean(name = "uploadTransportationEntDataTrigger")
    public CronTriggerFactoryBean uploadTransportationEntDataCronJobTrigger(@Qualifier("uploadTransportationEntDataJob") JobDetail reptilianJob) {
        CronTriggerFactoryBean cronTriggerFactoryBean = new CronTriggerFactoryBean();
        cronTriggerFactoryBean.setJobDetail(reptilianJob);
        //cron表达式
        cronTriggerFactoryBean.setCronExpression(quartzProperties.getTransportationEntCronExpression());
        cronTriggerFactoryBean.setName("uploadTransportationEntDataJobTrigger");
        return cronTriggerFactoryBean;
    }

    /**
     * 调度工厂
     *
     * @param uploadInspectDataJobTrigger 触发器
     * @return SchedulerFactoryBean
     */
    @Bean(name = "scheduler")
    public SchedulerFactoryBean schedulerFactory(@Qualifier("uploadInspectDataTrigger") Trigger uploadInspectDataJobTrigger,
                                                 @Qualifier("uploadFixAndInspectEntDataTrigger") Trigger uploadFixAndInspectEntDataJobTrigger,
                                                 @Qualifier("uploadTransportationEntDataTrigger") Trigger uploadTransportationEntDataJobTrigger) {
        SchedulerFactoryBean factoryBean = new SchedulerFactoryBean();
        // 用于quartz集群,QuartzScheduler 启动时更新己存在的Job
        factoryBean.setOverwriteExistingJobs(true);
        // 延时启动，应用启动1秒后
        factoryBean.setStartupDelay(1);
        // 注册触发器
        factoryBean.setTriggers(uploadInspectDataJobTrigger,uploadFixAndInspectEntDataJobTrigger,uploadTransportationEntDataJobTrigger);
        return factoryBean;
    }

}